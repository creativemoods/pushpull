image: node:18

stages:
  - install
  - build
  - prepare
  - package
  - deploy

variables:
  COMPOSER_VERSION: 2
  NODE_ENV: production
  PLUGIN_VERSION: "free" # Default is "free" version
  GITHUB_REPO_URL: "https://github.com/creativemoods/pushpull"  # GitHub repo URL

cache:
  paths:
    - node_modules/
    - vendor/

#before_script:
#  - apt-get update && apt-get install -y unzip curl git php php-cli
#  - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

#install_dependencies:
#  stage: install
#  script:
#    - npm install --omit=optional
#    - composer install --no-dev --prefer-dist --optimize-autoloader
#  artifacts:
#    paths:
#      - vendor/
#  tags:
#    - pushpull  # Run the job only on runners with this tag

#build_assets:
#  stage: build
#  script:
#    - if [ "$CI_COMMIT_REF_NAME" == "pro" ]; then export PLUGIN_VERSION="pro"; fi
#    - npx wp-scripts build
#  artifacts:
#    paths:
#      - build/
#  tags:
#    - pushpull  # Run the job only on runners with this tag

#prepare_autoload:
#  stage: prepare
#  script:
#    - composer dump-autoload --no-dev -o
#  tags:
#    - pushpull  # Run the job only on runners with this tag

#package_plugin:
#  stage: package
#  script:
#    - npm run zip
#  artifacts:
#    paths:
#      - "*.zip"
#    expire_in: 7 days
#  tags:
#    - pushpull  # Run the job only on runners with this tag

# Do a merge of main into release-free and squash the commits, then create a tag v1.2.3-free from release-free to push the code to github
deployfree:
  stage: deploy
  script:
    - echo "Pushing the free version to GitHub..."
    - echo "$PUSHPULL_GITHUB_TOKEN"
    - git remote set-url origin https://x-access-token:$PUSHPULL_GITHUB_TOKEN@github.com/creativemoods/pushpull.git
    - git config --global user.email "hello@creativemoods.pt"
    - git config --global user.name "PushPull maintainer"

    # Check out the main branch (in case the pipeline is triggered on a merge request)
    - git checkout $CI_COMMIT_REF_NAME

    # Push the commit and tags to GitHub
    - git push origin $CI_COMMIT_REF_NAME --force  # Use --force to push the squashed commit
    - git push origin --tags
  rules:
    - if: &version '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d-free+$/'
      when: on_success  # Deploy only on version tags (e.g., v1.0.0-free, v1.1.0-free)
  tags:
    - pushpull  # Run the job only on runners with this tag

# Do a merge of main into release-pro and squash the commits, then create a tag v1.2.3-pro from release-pro to create a release
deploypro:
  stage: deploy
  script:
    - echo "Deploying the pro version..."
  rules:
    - if: &version '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d-pro+$/'
      when: on_success  # Deploy only on version tags (e.g., v1.0.0-pro, v1.1.0-pro)
  tags:
    - pushpull  # Run the job only on runners with this tag
