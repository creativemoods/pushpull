<?php
/**
 * GenerateBlocks class.
 * @package PushPull
 */

namespace CreativeMoods\PushPull\hooks;

use CreativeMoods\PushPull\PushPull;
use WP_Post;

/**
 * Class GenerateBlocks
 */
class GenerateBlocks {
	/**
	 * Application container.
	 *
	 * @var PushPull
	 */
	protected $app;

	/**
	 * Initializes a new import manager.
	 *
	 * @param PushPull $app Application container.
	 */
	public function __construct( PushPull $app ) {
		$this->app = $app;
	}

    /**
     * meta__generateblocks_reusable_blocks filter
     *
     * @param mixed $value
     * @return mixed
     */
    public function meta__generateblocks_reusable_blocks($value) {
        // We can delete this key.
        // This is handled by extract_patternids().
        // This value will be regenerated by post_update_option() in generateblocks/includes/class-enqueue-css.php
        return False;
    }

	/**
	 * Find patterns in blocks code
	 *
	 * @param array $blocks
	 * @return array
	 */
	protected function find_patterns($blocks) {
		$patterns = [];
		foreach ($blocks as $block) {
			// Check if the block has attributes and a ref attribute
			if (isset($block['attrs']) && isset($block['attrs']['ref'])) {
				$patterns[] = $block['attrs']['ref'];
			}
			// Recursively search in innerBlocks if they exist
			if (isset($block['innerBlocks']) && is_array($block['innerBlocks'])) {
				$innerPatterns = $this->find_patterns($block['innerBlocks']);
				$patterns = array_merge($patterns, $innerPatterns);
			}
		}

		return $patterns;
	}

	/**
	 * Extract pattern Ids from a WP_Post
	 *
	 * @param WP_Post
	 *
	 * @return array
	 */
	protected function extract_patternids(WP_Post $post) {
		$data = [];
		$patterns = $this->find_patterns(parse_blocks($post->post_content));
		foreach ($patterns as $pattern) {
			$data[] = $pattern;
		}

		return $data;
	}

    /**
     * Manipulate data on export
     *
     * @param array $data
     * @param WP_Post $post
     * @return array
     */
    public function export(array $data, WP_Post $post) {
		// Handle references to patterns
		$patternids = $this->extract_patternids($post);
		$patternlist = [];
		foreach ($patternids as $patternid) {
			$pattern = get_post($patternid);
			$patternlist[] = ['name' => $pattern->post_name, 'id' => $pattern->ID];
		}
		$data['patterns'] = $patternlist;

        return $data;
    }
}
